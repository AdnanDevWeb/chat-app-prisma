datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String    @default("https://i.pinimg.com/originals/90/de/25/90de257fdac14d35d66a81ab8e282cad.jpg")
  bio           String?   @default("Consider creating a bio !")
  accounts      Account[]
  sessions      Session[]
  sentFriendRequests FriendRequest[] @relation("SenderRelation")
  receivedFriendRequests FriendRequest[] @relation("ReceiverRelation")
  user1FriendShips      FriendShip[]    @relation("User1RelationShips")
  user2FriendShips      FriendShip[]    @relation("User2RelationShips")
}

model FriendShip {
  id            Int       @id @default(autoincrement())
  user1       User      @relation( "User1RelationShips", fields: [user1Id], references: [id])
  user1Id       String   @unique
  user2        User      @relation( "User2RelationShips", fields: [user2Id], references: [id])
  user2Id      String     @unique
  createdAt     DateTime  @default(now())
  @@unique([user1Id, user2Id])
}

model FriendRequest {
  id            Int       @id @default(autoincrement())
  sender        User      @relation("SenderRelation", fields: [senderId], references: [id])
  senderId      String    @unique
  receiver      User      @relation("ReceiverRelation", fields: [emailToAdd], references: [email])
  emailToAdd    String    @unique
  status        String    @default("Pending") // You can define different statuses like "Accepted", "Declined", etc.
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}